

Object.defineProperty(exports, '__esModule', {
  value: true,
});

const _slicedToArray = (function () { function sliceIterator(arr, i) { const _arr = []; let _n = true; let _d = false; let _e; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i.return) _i.return(); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } throw new TypeError('Invalid attempt to destructure non-iterable instance'); }; }());

const _ariaQuery = require('aria-query');

const _axobjectQuery = require('axobject-query');

const _arrayIncludes = require('array-includes');

const _arrayIncludes2 = _interopRequireDefault(_arrayIncludes);

const _attributesComparator = require('./attributesComparator');

const _attributesComparator2 = _interopRequireDefault(_attributesComparator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } return Array.from(arr); }

const domKeys = [].concat(_toConsumableArray(_ariaQuery.dom.keys()));
const roleKeys = [].concat(_toConsumableArray(_ariaQuery.roles.keys()));
const elementRoleEntries = [].concat(_toConsumableArray(_ariaQuery.elementRoles));

const nonInteractiveRoles = new Set(roleKeys.filter((name) => {
  const role = _ariaQuery.roles.get(name);
  return !role.abstract && !role.superClass.some(classes => (0, _arrayIncludes2.default)(classes, 'widget'));
}));

const interactiveRoles = new Set([].concat(
  roleKeys,
  // 'toolbar' does not descend from widget, but it does support
  // aria-activedescendant, thus in practice we treat it as a widget.
  'toolbar',
).filter((name) => {
  const role = _ariaQuery.roles.get(name);
  return !role.abstract && role.superClass.some(classes => (0, _arrayIncludes2.default)(classes, 'widget'));
}));

const nonInteractiveElementRoleSchemas = elementRoleEntries.reduce((accumulator, _ref) => {
  let _ref2 = _slicedToArray(_ref, 2),
    elementSchema = _ref2[0],
    roleSet = _ref2[1];

  if ([].concat(_toConsumableArray(roleSet)).every(role => nonInteractiveRoles.has(role))) {
    accumulator.push(elementSchema);
  }
  return accumulator;
}, []);

const interactiveElementRoleSchemas = elementRoleEntries.reduce((accumulator, _ref3) => {
  let _ref4 = _slicedToArray(_ref3, 2),
    elementSchema = _ref4[0],
    roleSet = _ref4[1];

  if ([].concat(_toConsumableArray(roleSet)).some(role => interactiveRoles.has(role))) {
    accumulator.push(elementSchema);
  }
  return accumulator;
}, []);

const interactiveAXObjects = new Set([].concat(_toConsumableArray(_axobjectQuery.AXObjects.keys())).filter(name => _axobjectQuery.AXObjects.get(name).type === 'widget'));

const interactiveElementAXObjectSchemas = [].concat(_toConsumableArray(_axobjectQuery.elementAXObjects)).reduce((accumulator, _ref5) => {
  let _ref6 = _slicedToArray(_ref5, 2),
    elementSchema = _ref6[0],
    AXObjectSet = _ref6[1];

  if ([].concat(_toConsumableArray(AXObjectSet)).every(role => interactiveAXObjects.has(role))) {
    accumulator.push(elementSchema);
  }
  return accumulator;
}, []);

function checkIsInteractiveElement(tagName, attributes) {
  function elementSchemaMatcher(elementSchema) {
    return tagName === elementSchema.name && (0, _attributesComparator2.default)(elementSchema.attributes, attributes);
  }
  // Check in elementRoles for inherent interactive role associations for
  // this element.
  const isInherentInteractiveElement = interactiveElementRoleSchemas.some(elementSchemaMatcher);
  if (isInherentInteractiveElement) {
    return true;
  }
  // Check in elementRoles for inherent non-interactive role associations for
  // this element.
  const isInherentNonInteractiveElement = nonInteractiveElementRoleSchemas.some(elementSchemaMatcher);
  if (isInherentNonInteractiveElement) {
    return false;
  }
  // Check in elementAXObjects for AX Tree associations for this element.
  const isInteractiveAXElement = interactiveElementAXObjectSchemas.some(elementSchemaMatcher);
  if (isInteractiveAXElement) {
    return true;
  }

  return false;
}

/**
 * Returns boolean indicating whether the given element is
 * interactive on the DOM or not. Usually used when an element
 * has a dynamic handler on it and we need to discern whether or not
 * it's intention is to be interacted with on the DOM.
 */
const isInteractiveElement = function isInteractiveElement(tagName, attributes) {
  // Do not test higher level JSX components, as we do not know what
  // low-level DOM element this maps to.
  if (!(0, _arrayIncludes2.default)(domKeys, tagName)) {
    return false;
  }

  return checkIsInteractiveElement(tagName, attributes);
};

exports.default = isInteractiveElement;
