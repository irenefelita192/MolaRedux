

const _jsxAstUtils = require('jsx-ast-utils');

const _schemas = require('../util/schemas');

const _getImplicitRole = require('../util/getImplicitRole');

const _getImplicitRole2 = _interopRequireDefault(_getImplicitRole);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const errorMessage = function errorMessage(element, implicitRole) {
  return `The element ${element} has an implicit role of ${implicitRole}. Defining this explicitly is redundant and should be avoided.`;
}; /**
    * @fileoverview Enforce explicit role property is not the
    * same as implicit/default role property on element.
    * @author Ethan Cohen <@evcohen>
    */

// ----------------------------------------------------------------------------
// Rule Definition
// ----------------------------------------------------------------------------

const schema = (0, _schemas.generateObjSchema)();

module.exports = {
  meta: {
    docs: {},
    schema: [schema],
  },

  create: function create(context) {
    return {
      JSXOpeningElement: function JSXOpeningElement(node) {
        const type = (0, _jsxAstUtils.elementType)(node);
        const implicitRole = (0, _getImplicitRole2.default)(type, node.attributes);

        if (implicitRole === '') {
          return;
        }

        const role = (0, _jsxAstUtils.getProp)(node.attributes, 'role');
        const roleValue = (0, _jsxAstUtils.getLiteralPropValue)(role);

        if (typeof roleValue === 'string' && roleValue.toUpperCase() === implicitRole.toUpperCase()) {
          context.report({
            node,
            message: errorMessage(type, implicitRole.toLowerCase()),
          });
        }
      },
    };
  },
};
