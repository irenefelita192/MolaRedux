

const _jsxAstUtils = require('jsx-ast-utils');

const _schemas = require('../util/schemas');

const _isHiddenFromScreenReader = require('../util/isHiddenFromScreenReader');

const _isHiddenFromScreenReader2 = _interopRequireDefault(_isHiddenFromScreenReader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const REDUNDANT_WORDS = ['image', 'photo', 'picture']; /**
                                                      * @fileoverview Enforce img alt attribute does not have the word image, picture, or photo.
                                                      * @author Ethan Cohen
                                                      */

// ----------------------------------------------------------------------------
// Rule Definition
// ----------------------------------------------------------------------------

const errorMessage = 'Redundant alt attribute. Screen-readers already announce ' + '`img` tags as an image. You don\'t need to use the words `image`, ' + '`photo,` or `picture` (or any specified custom words) in the alt prop.';

const schema = (0, _schemas.generateObjSchema)({
  components: _schemas.arraySchema,
  words: _schemas.arraySchema,
});

module.exports = {
  meta: {
    docs: {},
    schema: [schema],
  },

  create: function create(context) {
    return {
      JSXOpeningElement: function JSXOpeningElement(node) {
        const options = context.options[0] || {};
        const componentOptions = options.components || [];
        const typesToValidate = ['img'].concat(componentOptions);
        const nodeType = (0, _jsxAstUtils.elementType)(node);

        // Only check 'label' elements and custom types.
        if (typesToValidate.indexOf(nodeType) === -1) {
          return;
        }

        const altProp = (0, _jsxAstUtils.getProp)(node.attributes, 'alt');
        // Return if alt prop is not present.
        if (altProp === undefined) {
          return;
        }

        const value = (0, _jsxAstUtils.getLiteralPropValue)(altProp);
        const isVisible = (0, _isHiddenFromScreenReader2.default)(nodeType, node.attributes) === false;

        let _options$words = options.words,
          words = _options$words === undefined ? [] : _options$words;

        const redundantWords = REDUNDANT_WORDS.concat(words);

        if (typeof value === 'string' && isVisible) {
          const hasRedundancy = redundantWords.some(word => Boolean(value.match(new RegExp(`(?!{)\\b${word}\\b(?!})`, 'i'))));

          if (hasRedundancy === true) {
            context.report({
              node,
              message: errorMessage,
            });
          }
        }
      },
    };
  },
};
