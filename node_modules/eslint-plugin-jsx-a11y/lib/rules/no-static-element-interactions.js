

const _ariaQuery = require('aria-query');

const _jsxAstUtils = require('jsx-ast-utils');

const _arrayIncludes = require('array-includes');

const _arrayIncludes2 = _interopRequireDefault(_arrayIncludes);

const _schemas = require('../util/schemas');

const _isAbstractRole = require('../util/isAbstractRole');

const _isAbstractRole2 = _interopRequireDefault(_isAbstractRole);

const _isHiddenFromScreenReader = require('../util/isHiddenFromScreenReader');

const _isHiddenFromScreenReader2 = _interopRequireDefault(_isHiddenFromScreenReader);

const _isInteractiveElement = require('../util/isInteractiveElement');

const _isInteractiveElement2 = _interopRequireDefault(_isInteractiveElement);

const _isInteractiveRole = require('../util/isInteractiveRole');

const _isInteractiveRole2 = _interopRequireDefault(_isInteractiveRole);

const _isNonInteractiveElement = require('../util/isNonInteractiveElement');

const _isNonInteractiveElement2 = _interopRequireDefault(_isNonInteractiveElement);

const _isNonInteractiveRole = require('../util/isNonInteractiveRole');

const _isNonInteractiveRole2 = _interopRequireDefault(_isNonInteractiveRole);

const _isPresentationRole = require('../util/isPresentationRole');

const _isPresentationRole2 = _interopRequireDefault(_isPresentationRole);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } return Array.from(arr); } /**
                                                                                                                                                                                                     * @fileoverview Enforce static elements have no interactive handlers.
                                                                                                                                                                                                     * @author Ethan Cohen
                                                                                                                                                                                                     *
                                                                                                                                                                                                     */

// ----------------------------------------------------------------------------
// Rule Definition
// ----------------------------------------------------------------------------

const errorMessage = 'Static HTML elements with event handlers require a role.';

const domElements = [].concat(_toConsumableArray(_ariaQuery.dom.keys()));
const defaultInteractiveProps = [].concat(_toConsumableArray(_jsxAstUtils.eventHandlersByType.focus), _toConsumableArray(_jsxAstUtils.eventHandlersByType.keyboard), _toConsumableArray(_jsxAstUtils.eventHandlersByType.mouse));
const schema = (0, _schemas.generateObjSchema)({
  handlers: _schemas.arraySchema,
});

module.exports = {
  meta: {
    docs: {},
    schema: [schema],
  },

  create: function create(context) {
    const options = context.options;

    return {
      JSXOpeningElement: function JSXOpeningElement(node) {
        const attributes = node.attributes;

        const type = (0, _jsxAstUtils.elementType)(node);
        const interactiveProps = options[0] ? options[0].handlers : defaultInteractiveProps;

        const hasInteractiveProps = interactiveProps.some(prop => (0, _jsxAstUtils.hasProp)(attributes, prop) && (0, _jsxAstUtils.getPropValue)((0, _jsxAstUtils.getProp)(attributes, prop)) != null);

        if (!(0, _arrayIncludes2.default)(domElements, type)) {
          // Do not test higher level JSX components, as we do not know what
          // low-level DOM element this maps to.
          return;
        } else if (!hasInteractiveProps || (0, _isHiddenFromScreenReader2.default)(type, attributes) || (0, _isPresentationRole2.default)(type, attributes)) {
          // Presentation is an intentional signal from the author that this
          // element is not meant to be perceivable. For example, a click screen
          // to close a dialog .
          return;
        } else if ((0, _isInteractiveElement2.default)(type, attributes) || (0, _isInteractiveRole2.default)(type, attributes) || (0, _isNonInteractiveElement2.default)(type, attributes) || (0, _isNonInteractiveRole2.default)(type, attributes) || (0, _isAbstractRole2.default)(type, attributes)) {
          // This rule has no opinion about abstract roles.
          return;
        }

        // Visible, non-interactive elements should not have an interactive handler.
        context.report({
          node,
          message: errorMessage,
        });
      },
    };
  },
};
