

const _ariaQuery = require('aria-query');

const _jsxAstUtils = require('jsx-ast-utils');

const _schemas = require('../util/schemas');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } return Array.from(arr); } /**
                                                                                                                                                                                                     * @fileoverview Enforce that elements that do not support ARIA roles,
                                                                                                                                                                                                     *  states and properties do not have those attributes.
                                                                                                                                                                                                     * @author Ethan Cohen
                                                                                                                                                                                                     */

// ----------------------------------------------------------------------------
// Rule Definition
// ----------------------------------------------------------------------------

const errorMessage = function errorMessage(invalidProp) {
  return `This element does not support ARIA roles, states and properties. Try removing the prop '${invalidProp}'.`;
};

const schema = (0, _schemas.generateObjSchema)();

module.exports = {
  meta: {
    docs: {},
    schema: [schema],
  },

  create: function create(context) {
    return {
      JSXOpeningElement: function JSXOpeningElement(node) {
        const nodeType = (0, _jsxAstUtils.elementType)(node);
        const nodeAttrs = _ariaQuery.dom.get(nodeType) || {};
        let _nodeAttrs$reserved = nodeAttrs.reserved,
          isReservedNodeType = _nodeAttrs$reserved === undefined ? false : _nodeAttrs$reserved;

        // If it's not reserved, then it can have aria-* roles, states, and properties

        if (isReservedNodeType === false) {
          return;
        }

        const invalidAttributes = [].concat(_toConsumableArray(_ariaQuery.aria.keys())).concat('role');

        node.attributes.forEach((prop) => {
          if (prop.type === 'JSXSpreadAttribute') {
            return;
          }

          const name = (0, _jsxAstUtils.propName)(prop).toLowerCase();

          if (invalidAttributes.indexOf(name) > -1) {
            context.report({
              node,
              message: errorMessage(name),
            });
          }
        });
      },
    };
  },
};
