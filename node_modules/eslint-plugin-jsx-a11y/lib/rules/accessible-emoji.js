

const _emojiRegex = require('emoji-regex');

const _emojiRegex2 = _interopRequireDefault(_emojiRegex);

const _jsxAstUtils = require('jsx-ast-utils');

const _schemas = require('../util/schemas');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const errorMessage = 'Emojis should be wrapped in <span>, have role="img", and have an accessible description with aria-label or aria-labelledby.'; /**
                                                                                                                                                   * @fileoverview Enforce emojis are wrapped in <span> and provide screenreader access.
                                                                                                                                                   * @author Ethan Cohen
                                                                                                                                                   */

// ----------------------------------------------------------------------------
// Rule Definition
// ----------------------------------------------------------------------------

const schema = (0, _schemas.generateObjSchema)();

module.exports = {
  meta: {
    docs: {},
    schema: [schema],
  },

  create: function create(context) {
    return {
      JSXOpeningElement: function JSXOpeningElement(node) {
        const literalChildValue = node.parent.children.find(child => child.type === 'Literal');

        if (literalChildValue && (0, _emojiRegex2.default)().test(literalChildValue.value)) {
          const rolePropValue = (0, _jsxAstUtils.getLiteralPropValue)((0, _jsxAstUtils.getProp)(node.attributes, 'role'));
          const ariaLabelProp = (0, _jsxAstUtils.getProp)(node.attributes, 'aria-label');
          const arialLabelledByProp = (0, _jsxAstUtils.getProp)(node.attributes, 'aria-labelledby');
          const hasLabel = ariaLabelProp !== undefined || arialLabelledByProp !== undefined;
          const isSpan = (0, _jsxAstUtils.elementType)(node) === 'span';

          if (hasLabel === false || rolePropValue !== 'img' || isSpan === false) {
            context.report({
              node,
              message: errorMessage,
            });
          }
        }
      },
    };
  },
};
